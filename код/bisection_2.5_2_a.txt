public class NewtonRaphsonMethod {
    public static void main(String[] args) {
        double root = findRoot(x -> Math.pow(x, 4) + Math.pow(x, 3) - 7 * Math.pow(x, 2) - x + 5, x -> 4 * Math.pow(x, 3) + 3 * Math.pow(x, 2) - 14 * x - 1, 1.0, 1e-3, 1000);
        System.out.println("Approximate root: " + String.format("%.3f", root));
    }

    public static double findRoot(Equation equation, Derivative derivative, double x0, double tol, int maxIter) {
        double x = x0;

        int iterations = 0;
        while (Math.abs(equation.evaluate(x)) > tol && iterations < maxIter) {
            x = x - equation.evaluate(x) / derivative.evaluate(x);
            iterations++;
        }

        return x;
    }

    interface Equation {
        double evaluate(double x);
    }

    interface Derivative {
        double evaluate(double x);
    }
}
